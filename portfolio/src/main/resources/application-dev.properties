#Postgres Connection
spring.datasource.platform=postgres
spring.datasource.jdbc-url=jdbc:postgresql://localhost:5432/portfoliodb?createDatabaseIfNotExist=true&useSSL=false
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.hibernate.jdbc.time_zone=America/La_Paz
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

spring.application.name = portfolio-codegroup-challenge
spring.mvc.pathmatch.matching-strategy=ant-path-matcher
#spring.cloud.kubernetes.config.enabled = true
#spring.cloud.kubernetes.reload.enabled = false
#spring.cloud.kubernetes.reload.mode = polling
#spring.cloud.kubernetes.reload.period = 10000
spring.kafka.bootstrap-servers = ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092,localhost:39092}
#spring.kafka.consumer.group-id = group-pgo-consumer-bank
#spring.kafka.consumer.max-poll-interval-ms = 2147483647
#spring.kafka.consumer.session-time-out = 30000
#spring.kafka.max-poll-records = 3
#spring.kafka.retries = 1
#spring.kafka.topic = pgo-credit
#spring.output.ansi.enabled = detect
#spring.kafka.consumer.ackOnError = ${KAFKA_CONSUMER_ACKONERROR:true}
#spring.kafka.consumer.retryBackOff =  ${KAFKA_CONSUMER_RETRYBACKOFF:2000}   
#spring.kafka.consumer.reconnectBackOffMax = ${KAFKA_CONSUMER_RECONNECTBACKOFFMAX:4000}   
#spring.kafka.consumer.receiveBufferSize = ${KAFKA_CONSUMER_RECEIVE_BUFFER_SIZE:102400}
#kafka.consumer.receiveBufferSize = ${KAFKA_CONSUMER_RECEIVE_BUFFER_SIZE:102400}
#kafka.consumer.group-id = ${spring.kafka.consumer.group-id}